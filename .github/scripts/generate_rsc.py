#!/usr/bin/env python3
import os
import csv
import re
import requests
from datetime import datetime

def fetch_ip_list(asn):
    """从GitHub获取指定ASN的IP列表"""
    # 确保ASN没有前导零，纯数字
    asn_clean = str(int(asn))
    url = f"https://raw.githubusercontent.com/ipverse/asn-ip/refs/heads/master/as/{asn_clean}/ipv4-aggregated.txt"
    try:
        print(f"Fetching IPs from: {url}")
        response = requests.get(url)
        response.raise_for_status()
        # 过滤掉注释行和空行
        ip_list = [line.strip() for line in response.text.split('\n') 
                  if line.strip() and not line.strip().startswith('#')]
        print(f"Found {len(ip_list)} IPs for ASN {asn}")
        return ip_list
    except requests.exceptions.RequestException as e:
        print(f"Error fetching IP list for ASN {asn}: {e}")
        return []

def fetch_china_ip_list():
    """获取中国IP列表"""
    url = "https://raw.githubusercontent.com/mayaxcn/china-ip-list/master/chnroute.txt"
    try:
        print(f"Fetching China IP list from: {url}")
        response = requests.get(url)
        response.raise_for_status()
        # 过滤掉空行
        ip_list = [line.strip() for line in response.text.split('\n') if line.strip()]
        print(f"Found {len(ip_list)} China IP ranges")
        return set(ip_list)  # 使用集合以提高查找效率
    except requests.exceptions.RequestException as e:
        print(f"Error fetching China IP list: {e}")
        return set()

def load_asn_database():
    """从as.txt加载ASN数据库"""
    asn_db = {}
    companies_lower = {}  # 存储小写的公司名称，用于关键字搜索
    
    if not os.path.exists('as.txt'):
        print("Warning: as.txt file not found")
        return asn_db, companies_lower
    
    try:
        with open('as.txt', 'r') as f:
            csv_reader = csv.reader(f)
            for row in csv_reader:
                if len(row) >= 3:
                    asn = row[0].strip()
                    company = row[2].strip().replace('"', '')
                    asn_db[asn] = company
                    companies_lower[asn] = company.lower()
        print(f"Loaded {len(asn_db)} ASN entries from as.txt")
        return asn_db, companies_lower
    except Exception as e:
        print(f"Error loading ASN database: {e}")
        return {}, {}

def find_matching_asns(keyword, asn_db, companies_lower):
    """根据关键字查找匹配的ASN"""
    matching_asns = []
    keyword_lower = keyword.lower()
    
    for asn, company_lower in companies_lower.items():
        if keyword_lower in company_lower:
            matching_asns.append(asn)
    
    return matching_asns

def generate_rsc_file():
    """生成Mikrotik RSC文件"""
    if not os.path.exists('rule.list'):
        print("rule.list file not found")
        return False
    
    try:
        print("Starting RSC file generation")
        rsc_content = [
            "# Generated by ASN2RSC GitHub Action",
            f"# Last updated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}",
            "# IP lists for Mikrotik RouterOS",
            "",
            "/ip firewall address-list"
        ]
        
        # 加载ASN数据库
        asn_db, companies_lower = load_asn_database()
        if not asn_db:
            print("Warning: Empty ASN database, will use ASN numbers as list names for direct ASN entries")
        
        # 获取中国IP列表
        china_ips = fetch_china_ip_list()
        if not china_ips:
            print("Warning: Failed to fetch China IP list, continuing without exclusion")
        
        entry_count = 0
        excluded_count = 0
        processed_items = []
        
        with open('rule.list', 'r') as f:
            print("Reading rule.list file")
            for line in f:
                # 忽略空行和注释行
                line = line.strip()
                if not line or line.startswith('#'):
                    continue
                
                # 检查是否为纯数字（ASN）
                is_asn = line.isdigit()
                
                if is_asn:
                    # 直接作为ASN处理
                    asn = line
                    if asn in processed_items:
                        print(f"Skipping duplicate ASN: {asn}")
                        continue
                    
                    processed_items.append(asn)
                    
                    # 获取ASN对应的公司名称作为列表名
                    if asn in asn_db:
                        company_name = asn_db[asn]
                        # 从公司名中提取简短名称作为列表名
                        list_name = re.sub(r'[^a-zA-Z0-9]', '_', company_name)
                        list_name = re.sub(r'_+', '_', list_name)  # 替换多个连续下划线为单个
                        list_name = list_name.strip('_')[:30]  # 限制长度
                        
                        # 如果提取出的列表名为空，则使用ASN作为列表名
                        if not list_name:
                            list_name = f"ASN{asn}"
                    else:
                        # 如果在数据库中找不到，则使用ASN作为列表名
                        list_name = f"ASN{asn}"
                        print(f"ASN {asn} not found in database, using ASN{asn} as list name")
                    
                    print(f"Processing ASN {asn} for list {list_name}")
                    
                    # 获取ASN的IP列表
                    ips = fetch_ip_list(asn)
                    local_excluded_count = 0
                    filtered_ips = []
                    
                    if ips:
                        for ip in ips:
                            # 排除与中国IP完全一致的条目
                            if ip in china_ips:
                                local_excluded_count += 1
                                excluded_count += 1
                            else:
                                filtered_ips.append(ip)
                        
                        print(f"Added {len(filtered_ips)} IPs from ASN {asn} (excluded {local_excluded_count} China IPs)")
                    else:
                        print(f"No IPs found for ASN {asn}")
                    
                    # 添加到RSC内容
                    if filtered_ips:
                        for ip in filtered_ips:
                            rsc_content.append(f"add address={ip} list={list_name}")
                            entry_count += 1
                    else:
                        print(f"Warning: No IPs added for ASN {asn} after filtering")
                
                else:
                    # 作为关键字处理
                    keyword = line
                    if keyword in processed_items:
                        print(f"Skipping duplicate keyword: {keyword}")
                        continue
                    
                    processed_items.append(keyword)
                    print(f"Processing keyword: {keyword}")
                    
                    # 查找匹配的ASN
                    matching_asns = find_matching_asns(keyword, asn_db, companies_lower)
                    
                    if not matching_asns:
                        print(f"No matching ASNs found for keyword: {keyword}")
                        continue
                    
                    print(f"Found {len(matching_asns)} matching ASNs for keyword {keyword}: {', '.join(matching_asns)}")
                    
                    # 收集所有匹配ASN的IP，并排除中国IP
                    all_ips = []
                    for asn in matching_asns:
                        ips = fetch_ip_list(asn)
                        local_excluded_count = 0
                        if ips:
                            for ip in ips:
                                # 排除与中国IP完全一致的条目
                                if ip in china_ips:
                                    local_excluded_count += 1
                                    excluded_count += 1
                                else:
                                    all_ips.append(ip)
                            
                            print(f"Added IPs from ASN {asn} (excluded {local_excluded_count} China IPs)")
                        else:
                            print(f"No IPs found for ASN {asn}")
                    
                    # 添加到RSC内容
                    if all_ips:
                        # 移除重复的IP
                        unique_ips = list(set(all_ips))
                        print(f"Adding {len(unique_ips)} unique IPs to list {keyword}")
                        
                        for ip in unique_ips:
                            rsc_content.append(f"add address={ip} list={keyword}")
                            entry_count += 1
                    else:
                        print(f"No IPs found for keyword {keyword} after filtering")
        
        if entry_count == 0:
            print("Warning: No entries were added to the RSC file")
        
        with open('asn.rsc', 'w') as f:
            print(f"Writing {len(rsc_content)} lines to asn.rsc")
            f.write('\n'.join(rsc_content))
        
        print(f"Generated asn.rsc with {entry_count} IP entries (excluded {excluded_count} China IPs)")
        return True
    except Exception as e:
        print(f"Error generating RSC file: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = generate_rsc_file()
    if not success:
        print("Failed to generate asn.rsc file")
        exit(1)